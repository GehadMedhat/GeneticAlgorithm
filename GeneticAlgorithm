import random

def genetic_algorithm(population_size, chromosome_length, generations, 
                     crossover_rate, mutation_rate, fitness_function):
  """
  Simplified Genetic Algorithm implementation.

  Args:
    population_size: Number of individuals in the population.
    chromosome_length: Length of each individual's chromosome.
    generations: Number of generations to evolve.
    crossover_rate: Probability of crossover occurring.
    mutation_rate: Probability of mutation occurring.
    fitness_function: Function to evaluate the fitness of an individual.

  Returns:
    The best individual found and its fitness.
  """

  # Initialize population with random individuals
  population = [[random.randint(0, 1) for _ in range(chromosome_length)] 
                for _ in range(population_size)]

  for _ in range(generations):
    # Calculate fitness of each individual
    fitnesses = [fitness_function(individual) for individual in population]

    # Select parents using tournament selection
    parents = [tournament_selection(population, fitnesses) for _ in range(population_size)]

    # Create new population through crossover and mutation
    offspring = []
    for i in range(0, population_size, 2):
      parent1, parent2 = parents[i], parents[i+1]
      child1, child2 = crossover(parent1, parent2, crossover_rate)
      child1 = mutate(child1, mutation_rate)
      child2 = mutate(child2, mutation_rate)
      offspring.extend([child1, child2])

    population = offspring

  # Find the best individual in the final population
  best_index = max(range(population_size), key=lambda i: fitnesses[i])
  best_individual = population[best_index]
  best_fitness = fitnesses[best_index]

  return best_individual, best_fitness

def tournament_selection(population, fitnesses, tournament_size=3):
  """
  Performs tournament selection.
  """
  tournament = random.sample(range(len(population)), tournament_size)
  best_index = tournament[np.argmax([fitnesses[i] for i in tournament])]
  return population[best_index]

def crossover(parent1, parent2, crossover_rate):
  """
  Performs single-point crossover.
  """
  if random.random() < crossover_rate:
    crossover_point = random.randint(1, len(parent1) - 1)
    return parent1[:crossover_point] + parent2[crossover_point:], \
           parent2[:crossover_point] + parent1[crossover_point:]
  else:
    return parent1, parent2

def mutate(individual, mutation_rate):
  """
  Performs bit-flip mutation.
  """
  for i in range(len(individual)):
    if random.random() < mutation_rate:
      individual[i] = 1 - individual[i]
  return individual

# Example usage (replace with your actual fitness function)
def example_fitness(individual):
  return sum(individual) 

# Run the genetic algorithm
best_individual, best_fitness = genetic_algorithm(
    population_size=50, 
    chromosome_length=20, 
    generations=100, 
    crossover_rate=0.8, 
    mutation_rate=0.01, 
    fitness_function=example_fitness
)

print("Best Individual:", best_individual)
print("Best Fitness:", best_fitness)
